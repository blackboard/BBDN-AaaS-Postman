{
	"info": {
		"_postman_id": "dc5afeb3-e495-4f2e-8fd7-85230cd884d9",
		"name": "Ally as a Service",
		"description": "Easy way to have Postman generate the JWT token before requesting an authorization token from tAlly as a Service.\n\n* Add an empty environment\n* Execute \"INIT: Load Crypto Library for HS256\" to load the library into your postman globals\n* Update the collection variables with the following:\n  * ALLY_CLIENT_ID - Your client ID\n  * JWT_secret - Your Ally REST API Secret\n* Execute calls as desired\n\nThe Pre-Request script on each request will generate a JWT token for use as the 'Bearer' token to authorize that call.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "INIT: Load Crypto Library for RS256",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "05a37668-6d13-46d3-9010-63a5c494b06b",
						"type": "text/javascript",
						"exec": [
							"postman.setGlobalVariable(\"jsrsasign-js\", responseBody);"
						]
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js",
					"protocol": "http",
					"host": [
						"kjur",
						"github",
						"io"
					],
					"path": [
						"jsrsasign",
						"jsrsasign-latest-all-min.js"
					]
				},
				"description": "Load the RSA-Sign Crypto LIbrary in a global environment variable\n\nSource: http://kjur.github.io/jsrsasign/jsrsasign-latest-all-min.js\n\nGithub: https://github.com/kjur/jsrsasign"
			},
			"response": []
		},
		{
			"name": "Upload a file to Ally",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3b7dbd7d-7db6-46c9-ab7e-8a483a6e20c0",
						"exec": [
							"var data = JSON.parse(responseBody);",
							"if(response.status === 303) {",
							"    postman.setEnvironmentVariable(\"contentHash\", postman.response.Location.substring(str.lastIndexOf('/') + 1));",
							"}",
							"else {",
							"    postman.setEnvironmentVariable(\"contentHash\", data.hash);",
							"}",
							"",
							"console.log(\"contentHash=\" + pm.environment.get(\"contentHash\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "4e150169-e171-4b4e-ba07-bdee3df5847f",
						"exec": [
							"// Tips from: https://github.com/kjur/jsrsasign/issues/199",
							"// https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-generation",
							"",
							"var navigator = {}; //fake a navigator object for the lib",
							"var window = {}; //fake a window object for the lib",
							"var moment = require('moment');",
							"eval(pm.globals.get(\"jsrsasign-js\")); //import javascript jsrsasign",
							"pm.environment.set(\"JWT_iat\", moment().unix());",
							"",
							"var header = {",
							"\t\"alg\": pm.variables.get(\"JWT_alg\"),",
							"\t\"typ\": pm.variables.get(\"JWT_typ\")",
							"};",
							"console.log(1111, header);",
							"",
							"var data = {",
							"\t\"clientId\": pm.variables.get(\"ALLY_CLIENT_ID\"), ",
							"\t\"iat\": pm.variables.get(\"JWT_iat\"),",
							"};",
							"",
							"",
							"var secret = pm.variables.get(\"JWT_secret\");",
							"",
							"console.log('start 1');",
							"var sHeader = JSON.stringify(header);",
							"var sPayload = JSON.stringify(data);",
							"console.log(sHeader);",
							"console.log(sPayload);",
							"console.log('start 2');",
							"var sJWT = KJUR.jws.JWS.sign(pm.variables.get(\"JWT_alg\"), sHeader, sPayload, {utf8: pm.variables.get(\"JWT_secret\")});",
							"console.log(sJWT);",
							"",
							"postman.setEnvironmentVariable(\"token\", sJWT);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{token}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "file",
							"value": "",
							"contentType": "multipart/form-data",
							"type": "text",
							"disabled": true
						},
						{
							"key": "file",
							"contentType": "multipart/form-data",
							"description": "File to process",
							"type": "file",
							"src": "/Users/shurrey/Desktop/bbworld-workspace/VirtualDevConCEOLT-20200427.pptx"
						}
					]
				},
				"url": {
					"raw": "{{ALLY_URL}}/api/v2/clients/{{ALLY_CLIENT_ID}}/content",
					"host": [
						"{{ALLY_URL}}"
					],
					"path": [
						"api",
						"v2",
						"clients",
						"{{ALLY_CLIENT_ID}}",
						"content"
					]
				},
				"description": "Start the process by uploading the file you would like to get feedback for. This is a multipart POST request. The response will contain the statusUrl that you can poll to check whether the file has been processed. If the file was processed previously, a resourceUrl will be provided through which you can fetch the feedback information immediately.\n\n## Supported content types\n* PDFs\n* Office documents (.docx and .doc)\n* Office presentations (.pptx and .ppt)\n* Images\n* HTML files\n\n## Endpoint\n`POST /api/v2/clients/:clientId/content`\n\n## Parameters\n* **clientId** - Path parameter - Your Ally Client ID\n* **file** - Post parameter - The binary file data\n\n## Expected response\nThere are two potential outcomes:\n\n1. The file is new and will be processed asynchronously. The endpoint will return with a 202 Accepted response and the following response body:\n```\n    {\n        \"hash\": \"UkVBRE1FLm1k...\",\n        \"status\": \"pending\",\n        \"statusUrl\": \"/api/v2/clients/:clientId/content/UkVBRE1FLm1k.../status,\n        \"resourceUrl\": null\n    }\n```\n2. The file has been processed before. The endpoint will return a 303 See Other with a Location header to the feedback URL\n\ncURL\n```\ncurl \\\n  -H \"Authorization: Bearer myJwtToken\" \\\n  -F\"file=@test.pdf\" https://prod.ally.ac/api/v2/clients/:clientId/content\n```"
			},
			"response": []
		},
		{
			"name": "Check the processing status of a file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "f8bfc800-a253-4d43-b8d4-447e37185786",
						"exec": [
							"// Tips from: https://github.com/kjur/jsrsasign/issues/199",
							"// https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-generation",
							"",
							"var navigator = {}; //fake a navigator object for the lib",
							"var window = {}; //fake a window object for the lib",
							"var moment = require('moment');",
							"eval(pm.globals.get(\"jsrsasign-js\")); //import javascript jsrsasign",
							"pm.environment.set(\"JWT_iat\", moment().unix());",
							"",
							"var header = {",
							"\t\"alg\": pm.variables.get(\"JWT_alg\"),",
							"\t\"typ\": pm.variables.get(\"JWT_typ\")",
							"};",
							"console.log(1111, header);",
							"",
							"var data = {",
							"\t\"clientId\": pm.variables.get(\"ALLY_CLIENT_ID\"), ",
							"\t\"iat\": pm.variables.get(\"JWT_iat\"),",
							"};",
							"",
							"",
							"var secret = pm.variables.get(\"JWT_secret\");",
							"",
							"console.log('start 1');",
							"var sHeader = JSON.stringify(header);",
							"var sPayload = JSON.stringify(data);",
							"console.log(sHeader);",
							"console.log(sPayload);",
							"console.log('start 2');",
							"var sJWT = KJUR.jws.JWS.sign(pm.variables.get(\"JWT_alg\"), sHeader, sPayload, {utf8: pm.variables.get(\"JWT_secret\")});",
							"console.log(sJWT);",
							"",
							"postman.setEnvironmentVariable(\"token\", sJWT);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				},
				"description": "Ally processes files asynchronously. We aim to process files in near-realtime, but some delays might be present. This endpoint can be used to poll for status updates.\n\n## Endpoint\n`GET /api/v2/clients/:clientId/content/:contentHash/status`\n\n## Parameters\n* **clientId** - Path parameter - Your Ally Client ID\n* **contentHash** - Path parameter - The content hash from the previous endpoint\n\n## Expected response\nThis endpoint will always return a 200 status code for existing content hashes regardless of whether the file was processed successfully.\n```\n{\n    \"hash\": \"MS4gQWxsI...\",\n    \"status\": \"success\",\n    \"statusUrl\": \"/api/v2/clients/7/content/MS4gQWxsIH.../status\",\n    \"resourceUrl\": \"/api/v2/clients/7/content/MS4gQWxsIH...\"\n}\n```\nThe following status values can be identified:\n\n* success\n* pending\n* inprogress\n* failed\n\n## cURL\ncurl \\\n  -H \"Authorization: Bearer myJwtToken\" \\\n  https://prod.ally.ac/api/v2/clients/:clientId/content/:contentHash/status"
			},
			"response": []
		},
		{
			"name": "Retrieve the feedback for a file",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "de12b296-59d4-4efc-b3a0-bab6e0fbdf2a",
						"exec": [
							"// Tips from: https://github.com/kjur/jsrsasign/issues/199",
							"// https://github.com/kjur/jsrsasign/wiki/Tutorial-for-JWT-generation",
							"",
							"var navigator = {}; //fake a navigator object for the lib",
							"var window = {}; //fake a window object for the lib",
							"var moment = require('moment');",
							"eval(pm.globals.get(\"jsrsasign-js\")); //import javascript jsrsasign",
							"pm.environment.set(\"JWT_iat\", moment().unix());",
							"",
							"var header = {",
							"\t\"alg\": pm.variables.get(\"JWT_alg\"),",
							"\t\"typ\": pm.variables.get(\"JWT_typ\")",
							"};",
							"console.log(1111, header);",
							"",
							"var data = {",
							"\t\"clientId\": pm.variables.get(\"ALLY_CLIENT_ID\"), ",
							"\t\"iat\": pm.variables.get(\"JWT_iat\"),",
							"};",
							"",
							"",
							"var secret = pm.variables.get(\"JWT_secret\");",
							"",
							"console.log('start 1');",
							"var sHeader = JSON.stringify(header);",
							"var sPayload = JSON.stringify(data);",
							"console.log(sHeader);",
							"console.log(sPayload);",
							"console.log('start 2');",
							"var sJWT = KJUR.jws.JWS.sign(pm.variables.get(\"JWT_alg\"), sHeader, sPayload, {utf8: pm.variables.get(\"JWT_secret\")});",
							"console.log(sJWT);",
							"",
							"postman.setEnvironmentVariable(\"token\", sJWT);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": ""
				},
				"description": "Once the file is processed, the feedback can be retrieved\n\n## Endpoint\n`GET /api/v2/clients/:clientId/content/:contentHash`\n\n## Parameters\n* **clientId** - Path parameter - Your Ally Client ID\n* **contentHash** - Path parameter - The content hash from the previous endpoint\n* **feedback** - Query parameter - Whether feedback information should be returned. Should be true (full report), false or ommitted (metadata only).\n\n## Expected response\n```\n    {\n        \"hash\": \"Mi4gSGVhZGluZ3NfdGFnZ2VkX2luY29ycmVjdGx5LnBkZjo4NkE3NEJGOTUxRDA2NEM4Qzk1ODUyMDI0NEQ0REJBNkM4RDdGRjJCOmFwcGxpY2F0aW9uL3BkZg==\",\n        \"feedback\": {\n          \"score\": 0.4292113158749556,\n          \"visibility\": \"medium\",\n          \"report\": {\n            \"results\": {\n              \"Scanned\": {\n                \"score\": 1\n              },\n              \"Tagged\": {\n                \"score\": 1\n              },\n              \"AlternativeText\": {\n                \"snippets\": [\n                  {\n                    \"page\": 3,\n                    \"y0\": 397.45,\n                    \"x0\": 72,\n                    \"y1\": 720,\n                    \"x1\": 526\n                  },\n                  {\n                    \"page\": 4,\n                    \"y0\": 394.81,\n                    \"x0\": 72,\n                    \"y1\": 720,\n                    \"x1\": 476.8\n                  },\n                  ....\n                ],\n                \"score\": 0\n              },\n              \"Contrast\": {\n                \"snippets\": [\n                  {\n                    \"page\": 0,\n                    \"y0\": 588.6369,\n                    \"x0\": 63.583138,\n                    \"y1\": 612.7333,\n                    \"x1\": 385.0053\n                  },\n                  {\n                    \"page\": 1,\n                    \"y0\": 688.4769,\n                    \"x0\": 63.583138,\n                    \"y1\": 712.5733,\n                    \"x1\": 473.90308\n                  },\n                  ...\n                ],\n                \"score\": 0.9442992157651318\n              },\n              \"HeadingsSequential\": {\n                \"snippets\": [\n                  {\n                    \"page\": 2,\n                    \"y0\": 583.18,\n                    \"x0\": 72.024,\n                    \"y1\": 620.98,\n                    \"x1\": 233.324\n                  }\n                ],\n                \"score\": 0.9230769230769231\n              },\n              \"HeadingsHigherLevel\": {\n                \"snippets\": [],\n                \"score\": 1\n              },\n              \"Title\": {\n                \"score\": 0\n              },\n              \"TableHeaders\": {\n                \"snippets\": [\n                  {\n                    \"page\": 1,\n                    \"y0\": 344.09,\n                    \"x0\": 77.664,\n                    \"y1\": 645.45996,\n                    \"x1\": 517.17\n                  }\n                ],\n                \"score\": 0\n              },\n              \"LanguagePresence\": {\n                \"score\": 1\n              },\n              \"HeadingsPresence\": {\n                \"score\": 1\n              },\n              \"LanguageCorrect\": {\n                \"detectedLanguage\": \"en\",\n                \"score\": 1\n              },\n              \"HeadingsStartAtOne\": {\n                \"snippets\": [\n                  {\n                    \"page\": 0,\n                    \"y0\": 586.06,\n                    \"x0\": 72.024,\n                    \"y1\": 620.26,\n                    \"x1\": 376.75403\n                  }\n                ],\n                \"score\": 0\n              },\n              \"LibraryReference\": {\n                \"score\": 0\n              }\n            },\n            \"suggestions\": {\n              \"HeadingsSequential\": 0.4306552764930626,\n              \"Title\": 0.4471530009744932,\n              \"TableHeaders\": 0.47092573373138025,\n              \"HeadingsStartAtOne\": 0.44798280391034667,\n              \"AlternativeText\": 0.6169261962288668,\n              \"Contrast\": 0.4515796153846155,\n              \"LibraryReference\": 1\n            }\n          }\n        },\n        \"formats\": null,\n        \"metadata\": {\n          \"name\": \"2. Headings_tagged_incorrectly.pdf\",\n          \"decorative\": null,\n          \"description\": null,\n          \"fileType\": \"pdf\",\n          \"mimeType\": \"application/pdf\",\n          \"isVersioned\": false,\n          \"isSeizureInducing\": false,\n          \"libraryReference\": null\n        }\n      }\n```\n\n## cURL\n```\ncurl \\\n  -H \"Authorization: Bearer myJwtToken\" \\\n  https://prod.ally.ac/api/v2/clients/:clientId/content/:contentHash\n```"
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "db412f0d-dcbb-4939-84ec-a8e9c5fb623c",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "35a72494-343e-4985-812c-0d9b663c8821",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "35eea0c7-fdf3-407e-a110-8c9f49567f39",
			"key": "ALLY_URL",
			"value": "https://prod.ally.ac"
		},
		{
			"id": "762dd06f-92d6-4b05-8483-549cbe39dc77",
			"key": "JWT_typ",
			"value": "JWT"
		},
		{
			"id": "c4a610ca-a5b3-40a8-8f9d-8e4bcd22a1b5",
			"key": "JWT_alg",
			"value": "HS256"
		},
		{
			"id": "da04dc65-77c5-4c71-bc46-6138c28cd202",
			"key": "JWT_secret",
			"value": ""
		},
		{
			"id": "1a6e705a-577d-4d4f-9b19-c5c4e276d5e7",
			"key": "ALLY_CLIENT_ID",
			"value": ""
		}
	],
	"protocolProfileBehavior": {}
}